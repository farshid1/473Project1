{
  "name": "node-geocoder",
  "version": "2.1.0",
  "description": "node geocoding library, supports google maps, mapquest, open street map, ...",
  "main": "lib/geocoderfactory.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nchaulet/node-geocoder.git"
  },
  "keywords": [
    "geocoder",
    "geo",
    "google",
    "maps",
    "mapquest",
    "agol",
    "arcgis"
  ],
  "author": {
    "name": "nchaulet"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nchaulet/node-geocoder/issues"
  },
  "dependencies": {
    "q": "~1.0.1"
  },
  "devDependencies": {
    "chai": "~1.8",
    "mocha": "~1.14",
    "sinon": "~1.7"
  },
  "readme": "# node-geocoder\n\n[![Build Status](https://travis-ci.org/nchaulet/node-geocoder.png?branch=master)](https://travis-ci.org/nchaulet/node-geocoder)\n\nNode library for geocoding and reverse geocoding\n\n## Installation\n\n    npm install node-geocoder\n\n## Usage example\n\n```javascript\nvar geocoderProvider = 'google';\nvar httpAdapter = 'http';\n// optionnal\nvar extra = {\n    apiKey: 'YOUR_API_KEY', // for map quest\n    formatter: null         // 'gpx', 'string', ...\n};\n\nvar geocoder = require('node-geocoder').getGeocoder(geocoderProvider, httpAdapter, extra);\n\n// Using callback\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\n    console.log(res);\n});\n\n// Or using Promise\ngeocoder.geocode('29 champs elysée paris')\n    .then(function(res) {\n        console.log(res);\n    })\n    .err(function(err) {\n        console.log(err);\n    });\n\n// output :\n[{\n    latitude: 48.8698679,\n    longitude: 2.3072976,\n    country: 'France',\n    countryCode: 'FR',\n    city: 'Paris',\n    zipcode: '75008',\n    streetName: 'Champs-Élysées',\n    streetNumber: '29',\n    state: 'Île de France',\n    stateCode: 'IDF'\n}]\n\n// Reverse example\n\n// Using callback\ngeocoder.reverse(45.767, 4.833, function(err, res) {\n    console.log(res);\n});\n\n// Or using Promise\ngeocoder.reverse(45.767, 4.833)\n    .then(function(res) {\n        console.log(res);\n    })\n    .err(function(err) {\n        console.log(err);\n    });\n\n```\n\n## Geocoder Provider\n\n* `google` : GoogleGeocoder support address geocoding and reverse geocoding, use `extra.clientId`and `extra.apiKey`(privateKey)for business licence, you can also use `extra.language` for specify language\n* `freegeoip` : FreegeoipGeocoder support ip geocoding\n* `datasciencetoolkit` : DataScienceToolkitGeocoder supports ip v4 geocoding and address geocoding, use `extra.host` for specify a local instance\n* `openstreetmap` : OpenStreetMapGeocoder support address geocoding and reverse geocoding\n* `mapquest` : MapQuestGeocoder support address geocoding and reverse geocoding need an apiKey\n* `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder) support address geocoding and reverse geocoding need an apiKey\n* `agol` : ArcGis Online Geocoding service, supports geocoding and reverse.  Requires a client_id & client_secret (Only works with requestify)\n\n## Http adapter\n\n* `http`: This adapter uses Http nodejs library (by default)\n* `https`: This adapter uses Https nodejs library\n\n## Formatter\n\n* `gpx`    : format result using GPX format\n* `string` : format result to an String array (you need to specify `extra.formatterPattern` key)\n    * `%P` country\n    * `%p` country code\n    * `%n` street number\n    * `%S` street name\n    * `%z` zip code\n    * `%T` State\n    * `%t` state code\n\n## More\n\nYou can improve this project by adding new geocoders or http adapters.\n\nTo run tests just `npm test`\n\nTo check code style install `jshint` and just run `jshint lib test\n\n### Extending node geocoder\n\nYou can add new geocoders by implementing the two method geocode & reverse:\n\n```javascript\nvar geocoder = {\n    geocode: function(value, callback) { },\n    reverse: function(lat, lng, callback) { }\n}\n```\n\nYou can also add formatter implementing this interface\n\n```javascript\nvar formatter = {\n    format: function(data) { return formattedData; },\n}\n```\n\n## Changelog\n\n### 1.1.0\n\n* add google geocoder language option\n\n### 1.2.0\n\n* add openStreetmap geocoder language option\n* improve http error handling\n\n### 1.3.0\n\n* add host options for datasciencetoolkit\n* improve tests\n\n### 1.4.0\n\n* Added suport for the ESRI AGOL geocoding service\n* Included test coverage for the new geocoder\n\n### 2.0.0\n\n* remove requestify http adapter\n* Now support Promise API (using Q)\n\n### 2.0.1\n\n* fix bugs\n* add https adapter\n\n### 2.1.0\n\n* add openmapquest geocoder\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nchaulet/node-geocoder",
  "_id": "node-geocoder@2.1.0",
  "dist": {
    "shasum": "9f8dfd7b2566d11472d87aae49df4788d55e17e6"
  },
  "_from": "node-geocoder@",
  "_resolved": "https://registry.npmjs.org/node-geocoder/-/node-geocoder-2.1.0.tgz"
}
